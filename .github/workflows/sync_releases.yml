name: Sync External Releases

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install requests jq

    - name: Clean up old downloads
      run: |
        rm -rf ./downloads
        mkdir -p ./downloads

    - name: Create repositories list file
      run: |
        echo '[{"url": "https://github.com/Guovin/iptv-api"}, {"url": "https://github.com/nginx/nginx"}]' > repos.json

    - name: Run sync script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python sync_releases.py --repo-list ./repos.json --dest-dir ./downloads

    - name: Validate downloaded files
      run: |
        if [ -z "$(ls -A ./downloads)" ]; then
          echo "❌ 错误：未下载任何有效文件"
          exit 1
        fi

    - name: Check if files are valid archives
      run: |
        for file in $(find ./downloads -type f -name "*.zip"); do
          if unzip -tq "$file" >/dev/null 2>&1; then
            echo "✓ $file 是有效的 ZIP 文件"
          else
            echo "❌ $file 不是有效的 ZIP 文件"
            rm -f "$file"
          fi
        done
        
        for file in $(find ./downloads -type f -name "*.tar.gz"); do
          if tar -tzf "$file" >/dev/null 2>&1; then
            echo "✓ $file 是有效的 TAR.GZ 文件"
          else
            echo "❌ $file 不是有效的 TAR.GZ 文件"
            rm -f "$file"
          fi
        done

    - name: Generate unique release tag
      id: set_tag
      run: |
        # 生成基于时间戳的绝对唯一标签
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        RANDOM_SUFFIX=$(openssl rand -hex 4)
        UNIQUE_TAG="synced-${TIMESTAMP}-${RANDOM_SUFFIX}"
        echo "UNIQUE_TAG=${UNIQUE_TAG}" >> $GITHUB_ENV
        echo "使用绝对唯一标签: ${UNIQUE_TAG}"

    - name: Pre-clean potential conflicting tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 获取上一步生成的标签
        TAG_NAME=${{ env.UNIQUE_TAG }}
        
        # 检查标签是否存在
        response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG_NAME")
        
        if [[ "$response" != *"Not Found"* ]]; then
          echo "⚠️ 发现冲突标签: $TAG_NAME - 正在删除..."
          
          # 删除关联的发布
          release_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")
          release_id=$(echo "$release_response" | jq -r '.id')
          
          if [ "$release_id" != "null" ]; then
            echo "删除关联发布 ID: $release_id"
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          fi
          
          # 删除标签本身
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG_NAME"
            
          echo "✅ 成功删除冲突标签"
        else
          echo "✅ 无冲突标签 - $TAG_NAME 可用"
        fi

    - name: Create Release with Manual API Call
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UNIQUE_TAG: ${{ env.UNIQUE_TAG }}
      run: |
        # 使用直接API调用确保创建发布
        release_data=$(cat <<EOF
        {
          "tag_name": "$UNIQUE_TAG",
          "name": "Synced Releases ($UNIQUE_TAG)",
          "body": "自动同步的外部 Release 资源\\n同步时间: $(date)\\n源仓库: \\n- Guovin/iptv-api\\n- nginx/nginx",
          "draft": false,
          "prerelease": false
        }
        EOF
        )
        
        response=$(curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "$release_data" \
          "https://api.github.com/repos/${{ github.repository }}/releases")
        
        # 检查是否创建成功
        if [[ $(echo "$response" | jq -r '.tag_name') == "$UNIQUE_TAG" ]]; then
          echo "✅ 成功创建发布: $UNIQUE_TAG"
        else
          echo "❌ 创建发布失败:"
          echo "$response"
          exit 1
        fi

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ fromJSON(steps.create_release.outputs.result).id }}/assets{?name,label}
        asset_path: ./downloads/
        asset_name: release-assets.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete old releases (keep last 5)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CURRENT_TAG: ${{ env.UNIQUE_TAG }}
      run: |
        # 获取所有同步标签并按时间排序
        tags=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/tags" | \
          jq -r '.[] | select(.name | startswith("synced-")) | .name' | \
          sort -r)
        
        # 保留最新的5个标签（排除当前标签），删除其余的
        count=0
        echo "$tags" | while read tag; do
          if [ "$tag" != "$CURRENT_TAG" ]; then
            count=$((count+1))
            if [ $count -gt 5 ]; then
              echo "删除旧标签: $tag"
              # 删除标签和对应的发布
              release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag" | \
                jq -r '.id')
              if [ "$release_id" != "null" ]; then
                curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
              fi
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag"
            fi
          fi
        done

    - name: Clean up downloaded files
      run: rm -rf ./downloads