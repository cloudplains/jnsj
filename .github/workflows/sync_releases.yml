name: Sync External Releases

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install requests

    - name: Clean up old downloads
      run: |
        rm -rf ./downloads
        mkdir -p ./downloads

    - name: Create repositories list file
      run: |
        echo '[{"url": "https://github.com/Guovin/iptv-api"}, {"url": "https://github.com/nginx/nginx"}]' > repos.json

    - name: Run sync script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python sync_releases.py --repo-list ./repos.json --dest-dir ./downloads

    - name: Validate downloaded files
      run: |
        if [ -z "$(ls -A ./downloads)" ]; then
          echo "❌ 错误：未下载任何有效文件"
          exit 1
        fi

    - name: Check if files are valid archives
      run: |
        for file in $(find ./downloads -type f -name "*.zip"); do
          if unzip -tq "$file" >/dev/null 2>&1; then
            echo "✓ $file 是有效的 ZIP 文件"
          else
            echo "❌ $file 不是有效的 ZIP 文件"
            rm -f "$file"
          fi
        done
        
        for file in $(find ./downloads -type f -name "*.tar.gz"); do
          if tar -tzf "$file" >/dev/null 2>&1; then
            echo "✓ $file 是有效的 TAR.GZ 文件"
          else
            echo "❌ $file 不是有效的 TAR.GZ 文件"
            rm -f "$file"
          fi
        done

    - name: Delete old releases (keep last 5)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 获取所有同步标签并按时间排序
        tags=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/tags" | \
          jq -r '.[] | select(.name | startswith("synced-")) | .name' | \
          sort -r)
        
        # 保留最新的5个标签，删除其余的
        count=0
        echo "$tags" | while read tag; do
          count=$((count+1))
          if [ $count -gt 5 ]; then
            echo "删除旧标签: $tag"
            # 删除标签和对应的发布
            release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag" | \
              jq -r '.id')
            if [ "$release_id" != "null" ]; then
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            fi
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag"
          fi
        done

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: synced-${{ github.run_id }}-${{ github.run_attempt }}
        name: Synced Releases (${{ github.run_id }}.${{ github.run_attempt }})
        body: |
          自动同步的外部 Release 资源
          同步时间: ${{ github.run_created }}
          源仓库: 
          - Guovin/iptv-api
          - nginx/nginx
          工作流运行信息:
          - ID: ${{ github.run_id }}
          - 尝试: ${{ github.run_attempt }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Assets
      uses: ncipollo/release-action@v1
      with:
        artifacts: "./downloads/**"
        tag: synced-${{ github.run_id }}-${{ github.run_attempt }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean up downloaded files
      run: rm -rf ./downloads