name: URL Validation Workflow

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 时间 0 点触发
  workflow_dispatch:     # 允许手动触发

jobs:
  validate_urls:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install requests

    - name: Create and run validation script
      run: |
        # 创建并执行 URL 验证脚本
        cat > validate_urls.py << 'EOL'
import requests
import time
from datetime import datetime

def validate_urls():
    # 读取 URL 列表
    with open('urls.txt', 'r', encoding='utf-8') as f:
        urls = [line.strip() for line in f if line.strip()]
    
    print(f"Found {len(urls)} URLs to validate")
    
    valid_urls = []
    invalid_urls = []
    
    # 遍历验证每个 URL
    for i, url in enumerate(urls):
        try:
            print(f"Testing URL {i+1}/{len(urls)}: {url}")
            response = requests.get(
                url,
                timeout=10,         # 设置超时时间
                allow_redirects=True # 自动跟随重定向
            )
            if response.status_code == 200:
                valid_urls.append(url)
                print(f"✓ Valid: {url}")
            else:
                invalid_urls.append(url)
                print(f"✗ Invalid (status {response.status_code}): {url}")
        except Exception as e:
            invalid_urls.append(url)
            print(f"✗ Error: {url} - {str(e)}")
        
        # 防止请求过快被封禁
        time.sleep(0.5)
    
    # 生成备份文件
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"urls_{timestamp}.txt"
    
    # 保存有效 URL 到新文件
    with open(backup_filename, 'w', encoding='utf-8') as f:
        for url in valid_urls:
            f.write(url + '\n')
    
    # 覆盖原文件
    with open('urls.txt', 'w', encoding='utf-8') as f:
        for url in valid_urls:
            f.write(url + '\n')
    
    # 生成报告
    report = f"""URL Validation Report
Generated at: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Total URLs: {len(urls)}
Valid URLs: {len(valid_urls)}
Invalid URLs: {len(invalid_urls)}
Backup file: {backup_filename}
"""
    
    print(report)
    
    # 保存报告文件
    with open('url_validation_report.txt', 'w', encoding='utf-8') as f:
        f.write(report)
        if invalid_urls:
            f.write("\nInvalid URLs:\n")
            for url in invalid_urls:
                f.write(f"- {url}\n")

if __name__ == "__main__":
    validate_urls()
EOL

        # 执行生成的脚本
        python validate_urls.py

    - name: Commit changes
      run: |
        # 配置 Git 用户信息
        git config --local user.email "actions@github.com"
        git config --local user.name "github-actions[bot]"

        # 添加所有变更
        git add .

        # 检查是否有实际变更
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # 提交变更
          git commit -m "✅ URL validation - $(date +'%Y%m%d_%H%M%S')"
          
          # 拉取最新代码并合并
          git pull --rebase origin ${{ github.event.repository.default_branch }}
          
          # 推送变更
          git push
        fi